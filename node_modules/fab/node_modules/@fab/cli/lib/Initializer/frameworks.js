"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const __1 = require("../");
exports.Frameworks = {
    CreateReactApp: () => ({
        name: 'Create React App',
        scripts: {
            'build:fab': 'npm run build && npm run fab:build',
            'fab:build': 'fab build',
            'fab:serve': 'fab serve fab.zip',
        },
        plugins: {
            '@fab/input-static': {
                dir: 'build',
            },
            '@fab/plugin-render-html': {
                fallback: '/index.html',
            },
            '@fab/plugin-rewire-assets': {},
        },
    }),
    Gatsby: () => ({
        name: 'Gatbsy JS',
        scripts: {
            'build:fab': 'npm run build && npm run fab:build',
            'fab:build': 'fab build',
            'fab:serve': 'fab serve fab.zip',
        },
        plugins: {
            '@fab/input-static': {
                dir: 'public',
            },
            '@fab/plugin-render-html': {
                fallback: false,
            },
            '@fab/plugin-rewire-assets': {},
        },
    }),
    Next9: ({ export_build, build_cmd, }) => ({
        name: `NextJS v9+ (${export_build ? 'static' : 'dynamic'})`,
        scripts: {
            'build:fab': `${build_cmd} && npm run fab:build`,
            'fab:build': 'fab build',
            'fab:serve': 'fab serve fab.zip',
        },
        plugins: {
            ...(export_build
                ? {
                    '@fab/input-static': {
                        dir: 'out',
                    },
                    '@fab/plugin-render-html': {
                        fallback: '/index.html',
                    },
                }
                : {
                    '@fab/input-nextjs': {
                        dir: '.next',
                    },
                    '@fab/plugin-render-html': {
                        fallback: false,
                    },
                }),
            '@fab/plugin-rewire-assets': {},
        },
        async customConfig(root_dir) {
            if (export_build)
                return;
            const config_path = path_1.default.join(root_dir, 'next.config.js');
            if (await fs_extra_1.default.pathExists(config_path)) {
                const next_config = require(config_path);
                if (next_config.target !== 'serverless') {
                    __1.log(`❤️WARNING: Your NextJS project is not currently configured for a serverless build.❤️
            ${next_config.target
                        ? `Add 💛target: 'serverless'💛 to your 💛next.config.js💛 file.`
                        : `Currently your app is configured to build in 💛${next_config.target ||
                            'server'}💛 mode.
                Update this in your 💛next.config.js💛 by setting 💛target: 'serverless'💛`}
            Continuing setup, but ❤️fab build will fail❤️ until this is changed.`);
                }
                else {
                    __1.log(`Your app is already configured for a severless build. Proceeding.`);
                }
            }
            else {
                __1.log(`No 💛next.config.js💛 found, adding one to set 💛target: 'serverless'💛`);
                await fs_extra_1.default.writeFile(config_path, `module.exports = {\n  target: 'serverless'\n}\n`);
            }
        },
    }),
};
exports.GenericStatic = (build_cmd, found_output_dir) => ({
    name: 'Static Site',
    scripts: {
        'build:fab': `${build_cmd} && npm run fab:build`,
        'fab:build': 'fab build',
        'fab:serve': 'fab serve fab.zip',
    },
    plugins: {
        '@fab/input-static': {
            dir: found_output_dir,
        },
        '@fab/plugin-render-html': {
            fallback: '/index.html',
        },
        '@fab/plugin-rewire-assets': {},
    },
});
exports.FRAMEWORK_NAMES = Object.keys(exports.Frameworks);
//# sourceMappingURL=frameworks.js.map