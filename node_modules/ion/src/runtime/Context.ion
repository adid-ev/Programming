
const
    ion = import '../'
    Factory = import './Factory'
    Literal = import './Literal'
    noop = ->

const createObjectInserter = (container) ->
    return
        isOrdered: (value) -> false
        convert: (value) -> value
        getLength: -> 0 # doesn't matter.
        add: (value, index) ->
            let current = container[value]
            let insert = (current ? 0) + 1
            container[value] = insert
        remove: (index, value, moving) ->
            let current = container[value]
            if not current?
                throw new Error("Removing value '{{value}}' that was not present in container: {{container}}")
            let insert = current - 1
            if insert is 0
                delete container[value]
            else
                container[value] = insert

const createMapInserter = (container) ->
    let touch = ->
        container.touch ?= 0
        container.touch += 1
    return
        isOrdered: (value) -> false
        convert: (value) -> value
        getLength: -> container.size
        add: (value, index) ->
            let current = container.get(value)
            let insert = (current ? 0) + 1
            container.set(value, insert)
            touch()
        remove: (index, value, moving) ->
            let current = container.get(value)
            if not current?
                throw new Error("Removing value '{{value}}' that was not present in container: {{container}}")
            let insert = current - 1
            if insert is 0
                container.delete(value)
            else
                container.set(value, insert)
            touch()
const createArrayInserter = (container) ->
    # need to override sort..
    return
        isOrdered: (value) ->
            if container.sortCompareFunction?
                return false
            return container.unordered isnt true
        convert: (value) -> value
        getLength: -> container.length
        add: (value, index) ->
            if index?
                container.splice(index, 0, value)
            else
                container.push(value)
        remove: (index, value, moving) ->
            index ?= container.indexOf(value)
            container.splice(index, 1)

const isNode = (value) -> typeof value?.nodeType is "number"
const isWebComponent = (value) -> value?.nodeName?.indexOf('-') > 0
const createHtmlInserter = (container) ->
    return
        isOrdered: (value) ->
            if typeof value is 'function'
                return false
            if container.unordered
                return false
            return true
        convert: (value) ->
            if typeof value is 'function'
                let name = value.id ? value.name
                if not name?
                    throw new Error("Functions added to an Element must be named")
                let capture = false
                let captureSuffix = '_capture'
                if name.endsWith(captureSuffix)
                    capture = true
                    name = name.substring(0, name.length - captureSuffix.length)
                value.id = name
                value.capture = capture
            else if not isNode(value)
                value = document.createTextNode(value)
            return value
        getLength: -> container.childNodes.length
        add: (value, index, sourceNode) ->
            if typeof value is 'function'
                if value.toString().indexOf('ion.sync') < 0
                    value.wrapper ?= ->
                        value.apply(@, arguments)
                        ion.sync(value.id ? value.name)
                container.addEventListener(value.id, value.wrapper ? value, value.capture)
            else
                #  BEGIN POLYMER 1.X TEMPORARY HACK
                if global.Polymer #isWebComponent(container)
                    let polymerContainer = Polymer.dom(container)
                    if index?
                        let after = polymerContainer.childNodes[index]
                        if after?
                            polymerContainer.insertBefore(value, after)
                            return
                    polymerContainer.appendChild(value)
                #  END POLYMER 1.X TEMPORARY HACK
                else
                    if index?
                        let after = container.childNodes[index]
                        if after?
                            container.insertBefore(value, after)
                            return
                    container.appendChild(value)

        remove: (index, value, moving) ->
            # let debug = (value.className?) ? value.className.indexOf('debug') > -1 : false
            # # let debug = false
            # if debug
            #     console.log(inShadow(value) ? "shadow" : "normal")
            #     console.log('Removing:', value)
            #     console.log('From:', container)
            #     console.log('\n')
                
            if typeof value is 'function'
                container.removeEventListener(value.id, value.wrapper ? value)
            else if not moving
                #  BEGIN POLYMER 1.X TEMPORARY HACK
                if global.Polymer # isWebComponent(container)
                    let polymerContainer = Polymer.dom(container)

                    # value # Useful when debugging. Color codes elements that SHOULD be removed.
                    #     style:
                    #         'background-color': 'red'

                    try
                        polymerContainer.removeChild(value)
                    catch e
                        if not warnedOfRemovalBug
                            warnedOfRemovalBug = true
                            console.log('TODO: FIX!!! Polymer error: Cannot remove child. It may not exist anymore/yet.') # -Kody
                    
                    # This is the 'correct' way to do this. After MVP we should investigate this more thoroughly. 
                    # Eventually we should replace the try/catch with this.
                    # This still doesn't catch every case because of wierd webcomponent behaviour. -Kody
                    ################################################################################################################
                    # if isDomAncestor(container, value) #value.parentElement is container
                    #     polymerContainer.removeChild(value)
                    # else
                    #     if not warnedOfRemovalBug
                    #         warnedOfRemovalBug = true
                    #         console.log('TODO: FIX!!! Polymer error: Cannot remove child. It may not exist anymore/yet.') # -Kody
                    ################################################################################################################

                #  END POLYMER 1.X TEMPORARY HACK
                else
                    if value.parentElement is container
                        container.removeChild(value)
                    else
                        console.log("Context is trying to remove an element from a container that it is not in.")
let warnedOfRemovalBug = false
const isDomAncestor(ancestor, child, debug) ->
    let realAncestor = child
    while realAncestor.parentElement?
        realAncestor = realAncestor.parentElement
        if realAncestor is ancestor
            return true
    return false

const createOrderManager = (container) ->
    let inserter
    if Array.isArray(container)
        inserter = createArrayInserter(container)
    else if container?.constructor is Map
        inserter = createMapInserter(container)
    else if isNode(container)
        inserter = createHtmlInserter(container)
    else if container?.constructor is Object
        inserter = createObjectInserter(container)
    else
        return
            insert: (value, order, fastInsert, sourceNode) -> ion.add(container, value, sourceNode)
            update: (oldOrder, newOrder) ->

    let baseLength = inserter.getLength()
    let insertionOrders = []
    let insertionValues = {}        # order => value
    let pendingOrderChanges = {}    # oldOrder => newOrder

    let insertInternal = (value, order, fastInsert, sourceNode) ->
        if insertionValues[order]?
            throw new Error("Cannot add a new item with the same order as an existing item: {{JSON.stringify({order,previousValue:insertionValues[order],newValue:value})}}")

        if inserter.isOrdered(value)
            insertionValues[order] = value
            insertionOrders.push(order)
        else
            fastInsert = true

        if fastInsert
            inserter.add(value, null, sourceNode)
        else
            insertionOrders.sort()
            let index = insertionOrders.indexOf(order)
            inserter.add(value, baseLength + index, sourceNode)
    let removeInternal = (value, order, moving) ->
        if not inserter.isOrdered(value)
            inserter.remove(null, value)
        else
            # order MAY change during reactive runtime, so we may have to look it back up
            if insertionValues[order] isnt value
                # then we must find the new order for this value... this could be a fucking big bug source IF our values are equivalent primitives
                order = null
                for key, insertedValue of insertionValues
                    if insertedValue is value
                        order = key
                        break
                if order is null
                    throw new Error("Could not find value in insertionValues " + value)

            let index = insertionOrders.indexOf(order)
            if index < 0
                throw new Error("Insertion order {{JSON.stringify(order)}} not found {{JSON.stringify(insertionOrders)}}")
            # remove from insertionOrder
            insertionOrders.splice(index, 1)
            # remove from container at baseLength plus index
            inserter.remove(baseLength + index, value, moving)
            # delete from insertion values
            delete insertionValues[order]

    return
        insert: (value, order, fastInsert, sourceNode) ->
            value = inserter.convert(value)
            insertInternal(value, order, fastInsert, sourceNode)
            return -> removeInternal(value, order)
        update: (oldOrder, newOrder) ->
            if oldOrder? and newOrder?
                pendingOrderChanges[oldOrder] = newOrder
            else
                let reinsertValues = {}
                for let i = insertionOrders.length - 1; i >= 0; i--
                    let order = insertionOrders[i]
                    for oldOrderValue, newOrderValue of pendingOrderChanges
                        if order.startsWith(oldOrderValue)
                            let insertedValue = insertionValues[order]
                            # if insertedValue?.debug
                            #     console.log('REMOVING----------', insertedValue)

                            reinsertValues[newOrderValue + order.substring(oldOrderValue.length)] = insertedValue
                            removeInternal(insertedValue, order, true)

                # new re-add changed values
                for order, value of reinsertValues
                    # if value?.debug
                    #     console.log('REINSERTING+++++++++', insertedValue)
                    insertInternal(value, order)

                # now reset pendingOrderChanges
                pendingOrderChanges = {}

export class Context
    constructor: (parent, output, order) ->
        # the output object that values are written to
        @output = output
        # parent is either null or another Context
        @parent = parent
        # calculate and set the depth
        @depth = parent? ? parent.depth + 1 : 0
        # an object that maps variable names to variable expressions
        @variables = {}
        # store a reference to the root context
        @root = parent?.root ? @
        # runtime nodes keyed by toCode
        @_runtimes = {}
        # if there is a return expression, copy it
        @returnExpression = parent?.returnExpression
        # if this is a new output object then create a new list of objects inserted into output object
        # they are keyed by order string
        @inserter = output is parent?.output ? parent?.inserter : createOrderManager(output)
        @order = order
    properties:
        newContext: (output = @output, order) -> new Context(@, output, order)
        createRuntime: (node) ->
            return Factory.createRuntime(@, node)
        setFastInsert: (value) ->
            if @inserter?
                @inserter.fastInsert = value
        order:
            get: ->
                let value = @_order ? ""
                if @output? and @output is @parent?.output
                    value = @parent.order + value
                return value
            set: (value) ->
                let _order = @_order
                let oldValue = @order
                @_order = value ? ""
                let newValue = @order
                if _order? and newValue isnt oldValue
                    @inserter?.update(oldValue, newValue)
        insert: (value, order, sourceNode) ->
            order = @order + (order ? "")
            return @inserter.insert(value, order, @inserter.fastInsert, sourceNode)
        get: (name) ->
            let variable = @getVariable(name)
            if not variable?
                throw new Error("Variable not found: '{{name}}'")
            return variable.value
        getVariable: (ast) ->
            let name = typeof ast is 'string' ? ast : ast.name
            let context = @, value
            while context?
                let variable = context.variables[name]
                if variable?
                    return variable
                context = context.parent
            # if the variable is not defined by us then it is probably a global variable.
            # we do however require that it be a globally defined variable, otherwise we throw an error.
            value = global[name]
            if value is undefined
                let message = "Variable not found: '{{name}}'"
                if typeof ast is 'object'
                    message += " at ({{ast.loc.start.source}}:{{ast.loc.start.line}}:{{ast.loc.start.column + 1}})"
                throw new Error(message)

            # global values are considered to be constants.
            # we could consider caching these values within the context.
            let cachedGlobals = @root.globals ?= {}
            return cachedGlobals[name] ?= new Literal({value,mutable:true})
        setVariableFromAst: (name, node) ->
            if name?
                return @setVariableExpression(name, @createRuntime(node))
        setVariableLiteral: (name, value) ->
            if name?
                return @setVariableExpression(name, new Literal({value,mutable:true}))
        setVariableExpression: (name, expression) ->
            if name?
                if @variables[name]?
                    throw new Error("Variable {{name}} is already defined")
                # we always watch the expression to make sure it is created only once
                # if we don't, then it may be created and destroyed multiple times which can cause bugs
                @variables[name] = expression
                return expression
