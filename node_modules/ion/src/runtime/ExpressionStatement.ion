const
    ion = import '../'
    {Factory,Statement} = import './'


export class ExpressionStatement extends Statement
    properties:
        activate: ->
            super
            @runtimeExpression ?= @context.createRuntime(@expression)
            @unobserve = @runtimeExpression.observe(
                @runtimeExpressionObserver ?= (value) =>
                    if @expressionValue isnt value
                        @expressionValue = value
                        @_remove?()
                        @_remove = null
                        if @context.output? and value isnt undefined
                            # try
                            @_remove = @context.insert(value, @order, @)
                            # catch e
                            #     console.warn("Error adding {{value}} to {{@context.output}}:  ({{Factory.toCode(@callee)}}) ({{@loc.start.source}}:{{@loc.start.line}}:{{@loc.start.column + 1}})")
                            #     console.error(e)
                            
            )
        deactivate: ->
            super
            @runtimeExpressionObserver?(undefined)
            @unobserve?()
            @unobserve = null
            @_remove?()
            @_remove = null
