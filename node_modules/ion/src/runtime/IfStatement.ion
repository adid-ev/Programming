const
    ion = import '../'
    {Statement,Factory} = import './'

let counter = 0
let getCounter = -> counter++

export class IfStatement extends Statement
    constructor: ->
        super
        this.id = getCounter()
    properties:
        activate: ->
            super
            @testExpression ?= @context.createRuntime(@test)
            @unobserve = @testExpression.observe(
                @testExpressionObserver ?= (value) =>
                    if value
                        if not @consequentStatement?.isActive
                            if @alternateStatement?.isActive
                                @alternateStatement.deactivate()
                                # we don't have to necessarily delete old statements
                                # but behavior is more predictable this way
                                @alternateStatement = null
                            let context = @context.newContext(null, @order)
                            @consequentStatement = context.createRuntime(@consequent)
                            @consequentStatement.activate()
                    else
                        if not @alternateStatement?.isActive
                            if @consequentStatement?.isActive
                                @consequentStatement.deactivate()
                                @consequentStatement = null
                            if @alternate?
                                let context = @context.newContext(null, @order)
                                @alternateStatement = context.createRuntime(@alternate)
                                @alternateStatement.activate()
            )
        deactivate: ->
            super
            @unobserve?()
            if @alternateStatement?.isActive
                @alternateStatement?.deactivate()
                @alternateStatement = null
            if @consequentStatement?.isActive
                @consequentStatement?.deactivate()
                @consequentStatement = null
