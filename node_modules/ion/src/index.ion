const ion = module.exports # shouldn't depend on itself
const noop = ->

import './es6'

const
    valueTypes = {string:true,number:true,boolean:true}
    isValueType = (object) -> not object? or valueTypes[typeof object] ? false
    primitive = {string:true,number:true,boolean:true,function:true}
    isPrimitive = (object) -> not object? or primitive[typeof object] or false
    normalizeProperty = (property, name) ->
        if typeof property is 'function'
            property =
                writable: false
                value: property
        else if isPrimitive(property) or Array.isArray(property)
            property =
                value: property

        if not property.get? and not property.set? and not property.hasOwnProperty('value')
            property.value = undefined

        if property.hasOwnProperty('value')
            property.writable ?= true

        property.name = name

        return property
    normalizeProperties = (properties = {}) ->
        for name, property of properties
            properties[name] = normalizeProperty(property, name)
        return properties
    variableArgConstructs = []
        (type, a) -> new type()
        (type, a) -> new type(a[0])
        (type, a) -> new type(a[0], a[1])
        (type, a) -> new type(a[0], a[1], a[2])
        (type, a) -> new type(a[0], a[1], a[2], a[3])
        (type, a) -> new type(a[0], a[1], a[2], a[3], a[4])
        (type, a) -> new type(a[0], a[1], a[2], a[3], a[4], a[5])
        (type, a) -> new type(a[0], a[1], a[2], a[3], a[4], a[5], a[6])
        (type, a) -> new type(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])
        (type, a) -> new type(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])
        (type, a) -> new type(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])
    observeShim = import './es6/Object.observe'
    isObjectObservable = do ->
        let Node = global.Node ? ->
        let NodeList = global.NodeList ? ->
        let Location = global.Location ? ->
        return (a) ->
            if a instanceof Node or a instanceof NodeList or a instanceof Location
                return false
            return true

export const
    freeze = (object, deep = true) ->
        if Object.isFrozen(object)
            return object

        Object.freeze(object)
        if deep
            for key, value of object if value? and typeof value is 'object'
                freeze(value, deep)
        return object
    # sort = [{name:true},{age:false}]
    createSortFunction = (sorts) ->
        if not Array.isArray(sorts)
            sorts = [sorts]
        return (a, b) ->
            if a is b
                return 0
            if not a?
                return +1
            if not b?
                return -1
            for sort in sorts
                for name, ascending of sort
                    let aValue = a[name] ? null
                    let bValue = b[name] ? null
                    if aValue is bValue
                        continue
                    if aValue? and not bValue?
                        return -1
                    if not aValue? and bValue?
                        return +1
                    if aValue > bValue
                        return ascending ? +1 : -1
                    if aValue < bValue
                        return ascending ? -1 : +1
            return 0
    runFile = (file) -> require('./builder').runFile(file)
    patch = do ->
        let mergePatch = import './mergePatch'
        let patchFunction = (object, patch, schema) -> mergePatch.merge(object, patch, null, schema)
        for key, value of mergePatch
            patchFunction[key] = value
        return patchFunction
    create = (type, args) -> variableArgConstructs[args.length](type, args)
    setImmediate = (callback) ->
        if global.setImmediate?
            let id = global.setImmediate(callback)
            return -> global.clearImmediate(id)
        else
            let id = setTimeout(callback, 50)
            return -> clearTimeout(id)
    requestAnimationFrame = (callback) ->
        if global.requestAnimationFrame?
            return global.requestAnimationFrame(callback)
        else if global?.nextTick?
            global.process.nextTick(callback)
        else
            setImmediate(callback)
    throttleAnimation = (callback) ->
        # ensures that a callback is not called any more often than an animation frame is available.
        let awaitingCallbackArgs = null
        let animationFrameCallback = ->
            callback.apply(null, awaitingCallbackArgs)
            awaitingCallbackArgs = null
        return ->
            if not awaitingCallbackArgs?
                requestAnimationFrame(animationFrameCallback)
            awaitingCallbackArgs = Array.prototype.slice.call(arguments, 0)
    template = (fn, template) ->
        fn.template = template ? true
        return fn
    createRuntime = (ast, args, parent) ->
        const Context = import './runtime/Context'
        const context = new Context(parent)
        if args?
            for name, value of args
                context.setVariableLiteral(name, value)
        return context.createRuntime(ast)
    clone = (object, _deep = false, depth = 0) ->
        if object is null or typeof object isnt 'object'
            return object

        if depth >= 50
            console.log('this is too deep, debug it')
            debugger
        
        let copy = Array.isArray(object) ? [] : {}
        if _deep
            for k, v of object
                copy[k] = clone(v, true, depth + 1)
        else
            for k, v of object
                copy[k] = v
        return copy
    # observers = []
    observe = (object, observer, options) ->
        # let original = observer
        if object is global or object is console or isValueType(object)
            return noop
        let property = options?.property
        let priority = options?.priority
        let removed = false
        # property is optional
        let observable = isObjectObservable(object)

        if not observable
            if not property?
                return noop
            observeShim.observe(object, observer, property, priority)
            # console.log('observe shim ' + JSON.stringify(object))
        else if object? and observer? and typeof object is 'object'
            observeShim.observe(object, observer, null, priority)
            # console.log('observe ' + JSON.stringify(object))
            # watch change on dom elements
            object.addEventListener?('change', observer)
        object?.onObserved?(observer, property)
        # return a function that can be used to unboserve
        observe.count = (observe.count ? 0) + 1
        # console.log(observe.count)

        # console.log('removing', observe.count)
        # observers.push(original)
        return ->
            if not removed
                observe.count--
                # console.log('removing', observe.count)
                removed = true
                if not observable
                    observeShim.unobserve(object, observer, property)
                    # console.log('unobserve shim ' + JSON.stringify(object))
                else if object? and observer? and typeof object is 'object'
                    observeShim.unobserve(object, observer, property)
                    # console.log('unobserve ' + JSON.stringify(object))
                    # unwatch change on dom elements
                    object.removeEventListener?('change', observer)
                object?.unObserved?(observer, property)
            else
                # debugger
                console.warn("unobserve should not be called multiple times!")
    checkForChanges = observeShim.checkForChanges
    sync = observeShim.checkForChanges
    nextCheck = (callback) ->
        observeShim.nextCheck(callback)
    bind = (fn, thisArg) ->
        let newFn = fn.bind(thisArg)
        # the function name has semantic meaning for us when adding a function to an element
        # (see add function below)
        # so we copy the function name to the new bound function id property when binding
        # (function.name is readonly)
        if fn.name?.length > 0
            newFn.id = fn.id ? fn.name
        return newFn
    add = (container, item, sourceNode) ->
        let originalItem = item
        let remove
        if typeof item is 'function' and (item.name?.length > 0 or item.id?) and typeof container.addEventListener is 'function'
            let name = item.id ? item.name
            let capture = false
            let captureSuffix = '_capture'
            if name.endsWith(captureSuffix)
                capture = true
                name = name.substring(0, name.length - captureSuffix.length)
            item = ->
                originalItem.apply(@, arguments)
                sync(name)
            container.addEventListener(name, item, capture)
            remove = ->
                container.removeEventListener(name, item)
        else
            if container.nodeType is 1
                if typeof item isnt 'string' and not item?.nodeType?
                    item = JSON.stringify(item)
                if typeof item is 'string'
                    item = document.createTextNode(item)
                container.appendChild(item)
            else if container.push?
                container.push(item)
            else
                container.add(item)
            remove = ->
                if item?.removeSelf?
                    item.removeSelf()
                else if item?.parentNode?
                    item.parentNode.removeChild(item)
                else if container.lastIndexOf? and container.removeAt?
                    let index = container.lastIndexOf(item)
                    if index >= 0
                        container.removeAt(index)
                else if typeof container.remove is 'function'
                    container.remove(item)
                else if Array.isArray(container)
                    let index = container.lastIndexOf(item)
                    if index >= 0
                        container.splice(index, 1)

        item?.onAdded?(container)
        # returns a function which can be used to remove the item
        return ->
            remove()
            item?.onRemoved?(container)
    defineProperties = (object, properties) -> Object.defineProperties(object, normalizeProperties(properties))
    defineClass = (...definitions) ->
        const classDefinition = definitions[0]
        if definitions[1] is undefined
            # extend our base object by default unless user sets extends to null explicitly.
            definitions[1] = import './Object'
        classDefinition.super = definitions[1]
        const name = classDefinition.name ? classDefinition.id?.match(/([a-z_0-9\$]+)(\.js)?$/i)?[1]
        if not name?
            throw new Error('missing name property')
        let classFunction
        if classDefinition.hasOwnProperty('constructor')
            classFunction = classDefinition.constructor
        else if classDefinition.super?
            classFunction = eval("(function {{name}}() { {{name}}.super.apply(this, arguments); })")
        else
            classFunction = eval("(function {{name}}() {})")

        # successively merge patch the definitions onto the new class
        let canSetClassProperty = (key) ->
            if key is 'name'
                return false
            let descriptor = Object.getOwnPropertyDescriptor(classFunction, key)
            return not descriptor? or descriptor.writable or not descriptor.get?

        let types = new Set()   # a map of all types
        types.add(classFunction)
        for let i = definitions.length - 1; i >= 0; i--
            let definition = definitions[i]
            if definition?
                types.add(definition)
                for key, value of definition if key isnt 'test' or i is 0
                    if canSetClassProperty(key)
                        classFunction[key] = patch(classFunction[key], value)

        classFunction.types = types

        if classFunction.properties?
            defineProperties(classFunction.prototype, classFunction.properties)

        return classFunction
    is = (instance, type) ->
        if not instance?
            return false
        if not type?
            return true
        if typeof type is 'function'
            if typeof instance.is is 'function'
                return instance.is(type)
            return instance instanceof type
        else
            return instance is type
    makeReactive = (object, activate) ->
        let observeCount = 0
        let deactivate = null
        return Object.defineProperties(
            object
            {}
                onObserved:
                    value: ->
                        observeCount++
                        if observeCount is 1
                            deactivate = activate.call(object)
                unObserved:
                    value: ->
                        observeCount--
                        if observeCount is 0
                            deactivate?()
        )
    serialize = (object) -> JSON.stringify(object)
    typeKey = '$'
    deserialize = do ->
        let extractType = (object, namespace) ->
            if not object?
                return null
            # we should strongly type our objects when created, so make a factory
            let typeName = object[typeKey]
            if not typeName?
                return null
            typeName = typeName.split(/\//g).pop() # legacy/name/correction, only use last step
            let type = namespace[typeName]
            if not type?
                throw new Error("Type not found: {{ typeName }}")
            if not type.serializable
                throw new Error("Type is not serializable: {{ typeName }}")
            return type
        let convertType = (object, namespace) ->
            let type = extractType(object, namespace)
            if type?
                let values = object
                object = new type()
                # now iterate and only set properties that HAVE setters or are plain fields
                for k, v of values
                    let property = type.properties?[k]
                    if not property?.get? or property?.set?
                        object[k] = v
            # convert recursively
            for key, value of object
                if value?.constructor is Object
                    object[key] = convertType(value, namespace)
            return object
        let deserialize = (object, namespace) ->
            if typeof object is 'string'
                object = JSON.parse(object)

            return convertType(object, namespace)
        deserialize.extractType = extractType
        deserialize.convertType = convertType
        return deserialize
    reactive = (fn) ->
        let state = {}
        # todo: deep on do call...
        let patchResult = (intermediateResult) ->
            let diff = ion.patch.diff(state.result, intermediateResult)
            if diff isnt undefined
                state.result = ion.patch(state.result, diff)
        return template (arg) ->
            let intermediateResult = fn(deep arg)
            patchResult(deep intermediateResult)
            return state.result
    test =
        defineClass: ->
            const Foo = defineClass(
                {}
                    id: "Foo"
                    constructor: (number) ->
                        @number = number
                    properties:
                        getValue: -> @number
            )
            assert new Foo(2).getValue() is 2
        sortFunction: ->
            let records = [{name:'a',order:1},{name:'b',order:2},{name:'q',order:null},{name:'d',order:4},{name:'c',order:undefined}]
            records.sort(ion.createSortFunction([{order:true}]))
            assert records.map((x) -> x.name).join('') is 'abdqc'
            records = [{name:'a',order:1},{name:'b',order:2},{name:'q',order:null},{name:'d',order:4},{name:'c',order:undefined}]
            records.sort(ion.createSortFunction([{order:false}]))
            assert records.map((x) -> x.name).join('') is 'dbaqc'
        defineProperties:
            "should allow primitive values": ->
                const object = {}
                const result = defineProperties(
                    object
                    {}
                        f: -> "function"
                        i: 2
                        b: true
                        a: []
                        s: "hello"
                )
                assert object is result
                assert typeof object.f is 'function'
                assert object.f() is 'function'
                assert object.i is 2
                assert object.b is true
                assert Array.isArray(object.a)
                assert object.s is 'hello'

for name in ["runtime", "compiler", "builder", "browser"]
    do (name) ->
        Object.defineProperty(exports, name, {enumerable: true, get: -> require("./" + name)})

# # define custom reactive function on function.
# Object.defineProperty(
#     Function.prototype
#     'reactive'
#     {}
#         configurable: true
#         get: ->

# )

# if window, then on resize, check for changes
if global.window?
    global.window.addEventListener('resize', sync)