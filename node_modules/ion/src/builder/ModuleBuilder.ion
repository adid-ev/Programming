if global.window
    return

const
    ion = import '../'
    np = import 'path'
    File = import './File'
    Directory = import './Directory'
    builder = import './'
    utility = import './utility'

    compilers =
        ".coffee":
            compile: builder.compileCoffeeScript
        ".pegjs":
            compile: builder.compilePegjs
        # ".pegs":
        #     compile: builder.compilePegs
        ".js":
            compile: builder.shimJavascript
        ".ion":
            compile: builder.compileIon
            compileWithSourceMap: builder.compileIonWithSourceMap

export template (packagePatch) ->
    let packageJson = ion.patch(JSON.parse(new File('package.json').read()), packagePatch ? {})
    let inputs = do (packageJson) ->
        let names = packageJson.directories.src ? 'src'
        if not Array.isArray(names)
            names = [names]
        return [new Directory(name) for name in names]
    let input = inputs[0] # main input for backwards compatibility
    let output = new Directory(packageJson.directories.lib ? 'lib')
    let moduleName = packageJson.name ? ''

    # build all source files with a single search, and also build a list of their output names
    let extensions = Object.keys(compilers)
    for thisInput in inputs
        for path, source of thisInput.search(extensions, packageJson.build.exclude)
            if not source.isDirectory
                let compiler = compilers[source.getExtension()]
                let targetPath = builder.changeExtension(path, '.js')
                let outputFile = output.getFile(targetPath)
                if source.modified > outputFile.modified
                    # if compiler.compileWithSourceMap?
                    #     let mapPath = builder.changeExtension(path, '.map')
                    #     let mapName = mapPath.split(/[\/\\]/g).slice(-1)[0]
                    #     let [code,map] = compiler.compileWithSourceMap(source, packageJson)
                    #     void output.write(targetPath, code + "\n//# sourceMappingURL=./" + mapName)
                    #     void output.write(mapPath, map)
                    # else
                    if source.exists
                        void output.write(targetPath, compiler.compile(source, packageJson), {force:true})
                    else
                        void output.delete(targetPath)

    # build a default index file for each output directory (including root)
    let potentialIndexDirectories = input.search(null, extensions.concat(packageJson.build.exclude))
        ["."]: input.getFile('.')
    for path, file of potentialIndexDirectories
        if file.isDirectory
            # see if there is an input.js or input.ion file
            let isInputFile = input.getFile(path + "/index.js").exists or input.getFile(path + "/index.ion").exists or input.getFile(path + "/index.coffee").exists or input.getFile(path + "/index.ts").exists
            if not isInputFile
                # then create an output file
                let indexDirectory = output.getDirectory(path)
                let indexName = "index.js"
                let indexFile = indexDirectory.getFile(indexName)
                # get a list of all output files in that directory
                let lines = {}
                    for key, childFile of indexDirectory.search(null, null, {recursive:false})
                        if key isnt indexName and (childFile.path.endsWith('.js') or childFile.isDirectory)
                            let name = childFile.isDirectory ? key : key.substring(0, key.lastIndexOf('.js'))
                            if not name.startsWith('_') and name isnt ''
                                [key]: "Object.defineProperty(exports, '{{name}}', {get:function(){ return require('./{{name}}') }, enumerable: true}) "
                
                let linesString = [value for key, value of lines].concat(["Object.freeze(exports)"]).join('\n')
                # console.log(linesString)

                let indexModuleId = np.join(moduleName, path, "index").replace(/\\/g, '/')
                void indexDirectory.write(indexName, builder.addBrowserShim(linesString, indexModuleId))

    # build a manifest file with require.js at the top

    let rawFiles = output.search(".js", [/^_/, 'node_modules'].concat(packageJson.build.exclude))
    let outputFiles = {}
        for key, file of rawFiles
            if file.exists
                [key]: file
            else
                [key]: null
    let top = [key for key of outputFiles if key.endsWith('require.js')]
    let sortedFiles = top.concat([key for key, file of outputFiles if not builder.isPrivate(key) and top.indexOf(key) < 0 and file?])
    let manifestFileName = "manifest.json"
    let manifestFile = output.getFile(manifestFileName)
    let manifest =
        modified: Math.max.apply(null, [file.modified for path, file of outputFiles if file?])
        files: [builder.normalizePath(path) for path in sortedFiles]
    output.write(manifestFileName, JSON.stringify(manifest, null, '  ', sortedFiles))

    # builder.test
    if packageJson.build.test isnt false
        builder.runTests(manifestFile, manifestFile.modified)
