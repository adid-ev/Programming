const
    ion = import './'
    isObject = (a) ->
        let type = typeof a
        return a? and type is 'object' or type is 'function'
    deleteValue = null
    isPrivate = (name) -> name[0] is '_'
    watchImmediate = (object, handler, edge) ->
        if not isObject(object)
            throw new Error("Cannot watch: #{object}")

        let watching = true
        let propertyWatchers = {}
        let watchProperties = (changes) ->
            let properties = Object.keys(changes ? object)
            for name in properties
                do (name) ->
                    if watching
                        propertyWatchers[name]?()
                        delete propertyWatchers[name]
                        let value = object[name]
                        if isObject(value)
                            propertyWatchers[name] = watchInternal(
                                value
                                (patch) ->
                                    if watching
                                        # console.log('WATCH PROPERTIES ' + JSON.stringify({[name]:patch}))
                                        handler({[name]:patch})
                                edge
                            )

        watchProperties(null)
        let unobserve = ion.observe(
            object
            (changes) ->
                # console.log('changes', JSON.stringify(changes))
                if watching
                    let patch = null
                    let changedProperties = {}
                    for {name,oldValue} in changes
                        changedProperties[name] = true
                        # we ignore names that start with underscore, they are considered private
                        if not isPrivate(name)
                            patch ?= {}
                            # we convert undefined values from delete into explicit nulls
                            let newValue = object[name]
                            # let newPatch = object.hasOwnProperty(name) ? newValue : deleteValue
                            let newDiff = diff(oldValue, newValue)
                            if newDiff isnt undefined
                                patch[name] = newDiff
                            # console.log('newPatchValue ', newPatch, 'diff', newDiff)
                    watchProperties(changedProperties)
                    if patch?
                        # console.log('OBSERVE ' + JSON.stringify(patch))
                        handler(patch)
            null
            edge
        )
        return ->
            watching = false
            for key, unwatch of propertyWatchers
                unwatch()
            unobserve()
            unobserve = null
    increment = /[+-]\d+/

    watchInternal = (object, handler, edge) ->
        global.watchInternalCount ?= 0
        global.watchInternalCount++

        # this version delays callbacks in order to merge all simultaneous changes
        # into a single patch object before calling the main handler
        let active = false
        let combinedPatch = undefined
        let finalCallback = ->
            handler(combinedPatch)
            active = false
            combinedPatch = undefined
        let delayedHandler = (patch) ->
            combinedPatch = combine(combinedPatch, patch)
            if not active
                ion.nextCheck(finalCallback)
                active = true
        let unwatch = watchImmediate(object, delayedHandler, edge)
        return ->
            unwatch()
            global.watchInternalCount--

export const
    canSetProperty = (object, key) -> not (typeof object is 'function' and key is 'name')
    # options:
    #   deleteNull: delete properties if value is null, default: true
    #   factory: function to use when constructing new objects, defaults to using plain objects {}
    merge = (_target, _values, options, schema) ->
        let values = _values # Assigning to arguments causes v8 optimization to bail out.
        let target = _target
        let deleteNull = options?.deleteNull ? true
        let _delete = options?.delete ? true

        if schema?.type is 'integer' and increment.test(values)
            if not deleteNull or typeof target is 'string' and increment.test(target)
                let total = parseInt(target ? 0) + parseInt(values.substring(1))
                values = "{{total > 0 ? '+' : '-'}}{{Math.abs(total)}}"
            else
                values = (typeof target is 'number' ? target : 0) + parseInt(values.substring(1))

        # length: null when targetting an Array indicates to convert Array to Object.
        if Array.isArray(target) and values?.length is null
            target = {}
            values = ion.clone(values, false) # changed to shallow clone because of infinite recursion
            delete values.length

        if values?.constructor isnt Object
            if Array.isArray(values)
                return values.slice(0) # changed to slice to avoid infinite recursion.
                # return ion.clone(values, true)
            else
                return values
        if not isObject(target)
            if options?.factory?
                target = options.factory(values)
            else
                target = {}
        let deletedValues = false
        for key, value of values
            if deleteNull and value is deleteValue
                deletedValues = true
                if _delete
                    delete target[key]
                else
                    target[key] = undefined
            else
                let itemSchema = schema?.items ? schema?.properties?[key]
                let newValue = merge(target[key], value, options, itemSchema)
                # OLD CODE BAD! It would make some new values NOT be set if they weren't changed due to being default property value 
                # if newValue isnt target[key] and canSetProperty(target, key)
                if canSetProperty(target, key)
                    target[key] = newValue
                    # console.log('*****patch*********')
        if deletedValues and Array.isArray(target)
            # shorten the length
            for let i = target.length; i > 0; i--
                if not target[i - 1]?
                    target.length = i - 1
        return target
    patchNoDelete = (object, patch) -> merge(object, patch, {delete:false})
    # combines two patches to make a single patch
    combine = (patch1, patch2, schema) -> merge(patch1, patch2, {deleteNull:false}, schema)
    # watches object for changes and calls the handler with patches
    watch = (object, handler, edge) ->
        # console.log('+   watch', object)
        global.watchCount ?= 0
        global.watchCount++
        let unwatch = watchInternal(object, handler, edge)
        return ->
            unwatch()
            # console.log('- unwatch', object)
            global.watchCount--
    diff = (oldValue, newValue) ->
        # returns a patch which can convert from the oldValue to the newValue
        # returns undefined if there is no difference between them
        # the patch SHOULD be treated as readonly, since it may reference pre-existing objects
        if oldValue is newValue
            return undefined
        if not (oldValue? and newValue? and typeof newValue is 'object' and typeof oldValue is 'object')
            return newValue ? null
        if not Array.isArray(oldValue) and Array.isArray(newValue)
            return newValue
        # old is array, but new isn't, so we add a special length:null value
        if Array.isArray(oldValue) and not Array.isArray(newValue)
            return JSON.parse(JSON.stringify(newValue))
                # this indicates that the array must be converted to an object.
                length: null
        let patch = undefined
        for name of oldValue if oldValue.hasOwnProperty(name)
            if not newValue.hasOwnProperty(name)
                patch ?= {}
                patch[name] = null
            else
                let propertyDiff = diff(oldValue[name], newValue[name])
                if propertyDiff isnt undefined
                    patch ?= {}
                    patch[name] = propertyDiff
        for name of newValue if newValue.hasOwnProperty(name) and not oldValue.hasOwnProperty(name)
            patch ?= {}
            patch[name] = newValue[name]
        # if they are both arrays and the new value is shorter, then shorten the length
        if Array.isArray(oldValue) and Array.isArray(newValue) and newValue.length < oldValue.length
            patch.length = newValue.length
            for let i = newValue.length; i < oldValue.length; i++
                delete patch[i]
        return patch
    isChange = (oldValue, newValue) ->
        # returns true if a newValue will change the old value
        # returns false if a newValue will not change the old value
        if oldValue is newValue
            return false
        if not (oldValue? and newValue? and typeof newValue is 'object' and typeof oldValue is 'object')
            return true
        if Array.isArray(newValue) and JSON.stringify(oldValue) isnt JSON.stringify(newValue)
            return true
        for name of newValue
            if not oldValue.hasOwnProperty(name)
                if not newValue[name]?
                    continue
                else
                    return true
            if isChange(oldValue[name], newValue[name])
                return true
        return false
    test = do ->
        const equal = (a, b) -> JSON.stringify(a) is JSON.stringify(b)
        return
            merge: ->
                assert equal({a:{b:2,c:3},d:4}, merge({a:{b:2}}, {a:{c:3},d:4}))
                assert equal({b:2}, merge(null, {b:2}))
                assert equal({a:1,b:2}, merge({a:1,b:2,c:3}, {c:undefined}))
                let double = (x) -> x * 2
                assert equal({a:double}, merge({},{a:double}))
                assert equal({a:[]}, merge({a:[1,2]}, {a:[]}))

                assert "+2" is merge("+1", "+1", null, {type:'integer'})

                # assigning null on an array just sets null to that index
                assert equal([1], merge([1,2], {1:null}))
                assert merge([1,2], {1:null}).length is 1
                assert merge({foo:[1,2]}, {foo:{1:null}}).foo.length is 1
                assert equal([1, undefined], merge([1,2], {1:undefined}))

            isChange: ->
                assert isChange({a:1}, null)
                assert not isChange(null, null)
                assert isChange(undefined, null)
                assert isChange(null, undefined)
                assert not isChange({a:1}, {a:1})
                assert not isChange({a:{b:2,c:3}}, {a:{b:2}})
                assert isChange({a:{b:2}}, {a:{b:3}})
                assert not isChange({a:1}, {b:null})
                assert isChange({a:[1,2]}, {a:[]})
            diff: ->
                assert equal({b:2}, diff({a:1}, {a:1,b:2}))
                assert equal({a:{b:3,c:null}}, diff({a:{b:2,c:4}}, {a:{b:3}}))
                assert equal({a:1}, diff(null, {a:1}))
                assert equal({c:{d:{f:4}}}, diff({a:1,b:2,c:{d:{e:1,f:2}}}, {a:1,b:2,c:{d:{e:1,f:4}}}))
                assert equal(null, diff({a:1}, undefined))
                assert equal(null, diff({a:1}, null))
                assert equal(undefined, diff({a:{b:2}}, {a:{b:2}}))

                # diff on arrays should result in shorter value length
                assert(equal(diff([1,2,3], [3,2]), { '0': 3, length: 2 }))

                # diff between array and object
                assert equal(diff([], {}), {length:null})
                assert equal(diff({}, []), [])

                let start = [1,2,3]
                let delta = diff(start, {foo:"a"})
                let result = merge(start, delta)
                assert equal(result, {foo:"a"})

            mergeActuallySetsValuesEvenWhenValueIsntChanged: ->
                let Point = class Point
                    properties:
                        x: 0
                        y: 0
                let a = new Point({})
                assert not a.hasOwnProperty('x')
                merge(a, {x:0})
                assert a.hasOwnProperty('x')
            observe: (done) ->
                let before = global.watchCount ? 0
                # console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
                let source =
                    name: 'Kris'
                    age: 41
                    children: 
                        Sadera:
                            grandchildren:
                                One: 1
                                Two: 2
                        Orion: []
                        Third: {}
                        Fifth: {alpha:1}
                let target = ion.clone(source, true)
                let unwatch = watch(
                    source
                    (patch) ->
                        target = merge(target, patch)
                        # should be immediate assert
                        if equal(source, target)
                            unwatch()
                            let after = global.watchCount
                            if before isnt after
                                done("Memory leak in watch: before = {{before}}, after = {{after}}")
                            else
                                done()
                )
                source
                    name: 'Fred'
                    children:
                        Orion:
                            a: 1
                            b: 2
                            c: 12
                        Sadera:
                            grandchildren:
                                three: 3
                        Fourth:
                            Something:
                                One: 1
                                Two: 2
                source.children.Fifth = {beta:2} # this should REMOVE alpha

                # todo: delete a property in a literal?
                delete source.children.Third
                # temp requirement
                ion.sync()
                # console.log('<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')

