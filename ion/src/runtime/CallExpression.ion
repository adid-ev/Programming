const
    ion = import '../'
    {DynamicExpression,ArrayExpression,Factory} = import './'

let lastLogInfo = null

module.exports = class CallExpression extends DynamicExpression
    properties:
        args: null
        activate: ->
            super

            # quick exit code...
            if this.callee.type is 'Function' and this.arguments.length is 0 and not this.callee.objectExpression?
                let callee = this.callee.value
                let value
                if this.callee.context
                    callee = callee(this.context)
                if @type is 'NewExpression'
                    value = new callee()
                else
                    value = callee()
                this.setValue(value)
                return

            @calleeExpression ?= @context.createRuntime(@callee)
            @unobserveCallee = @calleeExpression.observe(
                @calleeWatcher ?= (value) =>
                    if @isActive and not value? and not @existential and @loc?.start.source?
                        # we need to throw an exception here with location info
                        console.warn("Function is {{value}} ({{Factory.toCode(@callee)}}) ({{@loc.start.source}}:{{@loc.start.line}}:{{@loc.start.column + 1}})")
                    if @calleeValue isnt value
                        @calleeValue = value
                        @queueEvaluate()
            )
            # get thisArg and observe for changes
            @unobserveCalleeObject = @calleeExpression.objectExpression?.observe(
                @thisWatcher ?= (thisArg) =>
                    if thisArg isnt @thisArg
                        @unobserveThis?()
                        @unobserveThis = null
                        @thisArg = thisArg
                        if @calleeExpression.mutable and not @calleeValue?.template # we don't need to observe the thisArg if the callee is a template
                            if @calleeExpression.objectExpression.deep
                                # console.log('deep observe man-------------------------', thisArg, @calleeValue)
                                # deep observe
                                @unobserveThis = ion.patch.watch(
                                    thisArg
                                    @thisObserver ?= (patch) =>
                                        # console.log('deep change', patch)
                                        @queueEvaluate()
                                )
                            else
                                # shallow observe
                                @unobserveThis = ion.observe(
                                    thisArg
                                    @thisObserver ?= =>
                                        @queueEvaluate()
                                )
                        @queueEvaluate()
            )

            if @arguments.length is 0
                @argumentsValue = []
                @queueEvaluate()
            else
                @argumentExpressions ?= @context.createRuntime({type:'ArrayExpression',elements:@arguments, observeElements:not @calleeValue?.template})
                @unobserveArguments = @argumentExpressions.observe(
                    @argumentWatcher ?= (value) =>
                        @argumentsValue = value
                        @queueEvaluate()
                )
        deactivate: ->
            super
            @cancelQueuedEvaluate?()
            @unobserveCallee?()
            @unobserveArguments?()
            @unobserveCalleeObject?()
            @unobserveThis?()
            @unobserveTemplate?()
        queueEvaluate: ->
            if not @hasEvaluated?
                @evaluate()
            else if not @cancelQueuedEvaluate?
                @cancelQueuedEvaluate = ion.nextCheck(@boundEvaluate ?= @evaluate.bind(@))
        evaluate: ->
            @cancelQueuedEvaluate = null

            if not (@isActive and @calleeValue? and @argumentsValue? and (@thisArg? or not @calleeExpression.objectExpression?))
                return


            @hasEvaluated = true

            let value = undefined

            if @unobserveTemplate? and @lastCalleeValue is @calleeValue and @lastThisArg is @thisArg
                #   if only the arguments have changed, we don't need to call a template again,
                #   we can just change the previous argument values

                # THIS WAS CAUSING A BUG. Templates DO NOT pick up changes to root arguments.
                console.warn("Changing a template parameter directly, this hurts performance, should be fixed in ion: " + @ast.callee.name)

                # for arg, index in @argumentsValue
                #     if @lastArgumentsValue[index] isnt arg
                #         @lastArgumentsValue[index] = arg
                # # console.log('change template arguments template-------------------')
                # return

            # if @calleeValue.template
            #     console.log('reevaluate template-------------------')
            #     console.log(
            #         thisArgChanged: @lastThisArg isnt @thisArg
            #         calleeChanged: @lastCalleeValue isnt @calleeValue
            #     )

            @lastCalleeValue = @calleeValue
            @lastArgumentsValue = @argumentsValue
            @lastThisArg = @thisArg

            @unobserveTemplate?()
            @unobserveTemplate = null
            if @calleeValue.template
                # always use new on templates
                @template = @calleeValue.apply(@thisArg, @argumentsValue)
                @unobserveTemplate = @template.observe(@templateWatcher ?= @setValue.bind(@))
            else
                try
                    if @type is 'NewExpression'
                        # create a new with variable args
                        value = ion.create(@calleeValue, @argumentsValue)
                    else # @type is 'CallExpression'
                        if @thisArg is console
                            let start = @loc.start
                            let logInfo = "{{start.source}}:{{start.line}}"
                            if logInfo isnt lastLogInfo
                                lastLogInfo = logInfo
                                console.info(logInfo)
                        value = @calleeValue.apply(@thisArg, @argumentsValue)
                    @setValue(value)
                catch e
                    if @loc?
                        let start = @loc.start
                        console.error("Call Error at {{start.source}} (line:{{start.line}},column:{{start.column}})")
                    throw e











